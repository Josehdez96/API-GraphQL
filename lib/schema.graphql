"Valida los tipos de nivel"
enum Level { # Creamos un campo en el cual solo puede ir alguno de estos valores
  principiante 
  intermedio
  avanzado
}

union GlobalSearch = Course | Student | Monitor


type Course {  # 1) Creamos un Custom Type el cual define la interfaz de nuestro objeto schema o API
  _id: ID!
  title: String! # || ! || es establecer el Campo como obligatorio
  teacher: String
  description: String!
  topic: String
  people: [Student] #Nested Types, un tipo dentro de otro tipo
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person{
  _id: ID!
  name: String!
  email: String!
  phone: String
}



type Query { # 4) Recibimos el export de los ||resolvers|| y creamos la ESTRUCTURA de como se ver치 nuestro objeto incluyendo una breve descripci칩n de que datos contiene
  "Devuelve todos los cursos"
  getCourses: [Course], #Asignamos nuestro tipo anteriormente creado ||Course||
  
  "Devuelve un curso"
  getCourse(id: ID!): Course,

  
  "Devuelve todas las personas"  
  getPeople: [Person], 
  
  "Devuelve una persona"
  getPerson(id: ID!): Person,


  "Ejecuta una busqueda global"
  searchItems(keyword: String!): [GlobalSearch]
}




input CourseInput {#Los inputs son como plantillas que especifican que campos son necesarios para poder modificar la informaci칩n
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}



type Mutation { # 5) Creamos las acciones que me permiten almacenar informaci칩n en el API o DB
  "Crea un curso"
  createCourse(input: CourseInput!): Course, #Recibe el input o plantilla creado
  "Edita un curso"
  editCourse(_id: ID!, input: CourseEditInput): Course,


  "Crea una persona"
  createPerson(input: PersonInput!): Person,
  "Edita una persona"
  editPerson(_id: ID!, input: PersonEditInput): Person,


  "Elimina un curso"
  deleteCourse(_id: ID!): String,
  "Elimina una persona"
  deletePerson(_id: ID!): String,


  "Agrega una persona a un curso"
  addPeople(courseID: ID!, personID: ID!): Course
}